import re
import json
import pandas as pd
from transformers import pipeline

class HuggingFaceAnalyzer:
    """A class to handle document analysis with an option to use a Hugging Face model."""
    
    def __init__(self, use_granite=False):
        self.use_granite = use_granite
        self.text_pipeline = None
        if self.use_granite:
            # Note: The token should be passed securely, e.g., via Streamlit secrets.
            # Replace 'hf_YOUR_HUGGINGFACE_TOKEN_HERE' with your actual token.
            HUGGINGFACE_TOKEN = "hf_YOUR_HUGGINGFACE_TOKEN_HERE"
            try:
                self.text_pipeline = pipeline(
                    "text-generation",
                    model="ibm-granite/granite-3.3-8b-instruct",
                    token=HUGGINGFACE_TOKEN
                )
            except Exception as e:
                # Handle cases where the pipeline fails to load
                print(f"Failed to load Hugging Face pipeline: {e}")
                self.use_granite = False

    def extract_text(self, uploaded_file, filetype):
        """Mocks text extraction from a file."""
        if filetype not in ["pdf", "docx", "txt"]:
            raise ValueError("Unsupported file type")
        
        return uploaded_file.read().decode("utf-8", errors="ignore")

    def analyze_document(self, text, use_granite=False):
        """Analyzes a document using a Hugging Face model if selected."""
        if use_granite and self.text_pipeline:
            # Use Granite model via Hugging Face for advanced tasks
            simplified_clauses = self._generate_with_granite(text, "Simplify the following legal clauses:")
            summary = self._generate_with_granite(text, "Summarize the following legal document concisely:")
            
            # Use Granite for classification
            classification_prompt = "Classify the following document as either Non-Disclosure Agreement, Lease Agreement, Employment Contract, Service Agreement, or Other:"
            classification = self._generate_with_granite(text, classification_prompt)
        
            entities = {
                "Parties": ["John Doe", "Jane Smith"],
                "Dates": ["January 1, 2024", "December 31, 2025"],
                "Obligations": ["Deliver goods on time", "Pay monthly fee"],
            }
            
            clauses = ["This is a mock original clause 1.", "This is a mock original clause 2."]
        else:
            # Placeholder for local NLP model (e.g., spaCy)
            simplified_clauses = ["This is a mock simplified clause 1.", "This is a mock simplified clause 2."]
            summary = "This is a mock summary generated by a local NLP model."
            classification = "Employment Contract (Local Model)"

            entities = {
                "Parties": ["John Doe", "Jane Smith"],
                "Dates": ["January 1, 2024", "December 31, 2025"],
                "Obligations": ["Deliver goods on time", "Pay monthly fee"],
            }
            
            clauses = ["This is a mock original clause 1.", "This is a mock original clause 2."]

        return {
            "summary": summary,
            "classification": classification,
            "entities": entities,
            "simplified_clauses": simplified_clauses,
            "clauses": clauses
        }
    
    def _generate_with_granite(self, text, prompt):
        """Generates text using the Hugging Face pipeline."""
        try:
            formatted_input = self.text_pipeline.tokenizer.apply_chat_template(
                [{"role": "user", "content": f"{prompt} {text}"}],
                add_generation_prompt=True,
                tokenize=False,
            )

            outputs = self.text_pipeline(
                formatted_input,
                max_new_tokens=200,
                do_sample=False,  # Use greedy decoding for consistent results
                return_full_text=False
            )
            return outputs[0]['generated_text']
        except Exception as e:
            st.error(f"Error calling Hugging Face pipeline: {e}")
            return "API call failed."
